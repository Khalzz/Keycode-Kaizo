[gd_scene load_steps=39 format=3 uid="uid://btnlv2vwv2vd8"]

[ext_resource type="Script" path="res://Scripts/Label.gd" id="1_sd273"]
[ext_resource type="PackedScene" uid="uid://b6b0y5nbglke3" path="res://Scenes/Characters/hitboxes/Test/jab_hitbox.tscn" id="13_gc2vs"]
[ext_resource type="PackedScene" uid="uid://cqvv4kuglti0i" path="res://Scenes/Characters/hitboxes/Test/dash_attack_hitbox.tscn" id="14_h4xt5"]
[ext_resource type="PackedScene" uid="uid://brbtkvbimiilt" path="res://Scenes/Characters/hitboxes/Test/nair_hitbox.tscn" id="15_ia7bt"]
[ext_resource type="PackedScene" uid="uid://ujncgrjaa1a1" path="res://Scenes/Characters/hitboxes/Test/down_tilt_hitbox.tscn" id="19_enisu"]
[ext_resource type="PackedScene" uid="uid://djt7i54iyr3g6" path="res://Scenes/Characters/hitboxes/Test/uptilt_hitbox.tscn" id="22_vcq5u"]
[ext_resource type="PackedScene" uid="uid://bx768iceq72re" path="res://Scenes/Characters/hitboxes/Test/downair_hitbhox.tscn" id="25_p0biw"]
[ext_resource type="PackedScene" uid="uid://boglq21xh1aex" path="res://Scenes/Characters/hitboxes/Test/sidetilt_hitbox.tscn" id="27_ffsd5"]
[ext_resource type="PackedScene" uid="uid://w2ediwfail4o" path="res://Scenes/Characters/hitboxes/Test/upair_hitbox.tscn" id="30_v0kk2"]
[ext_resource type="PackedScene" uid="uid://crur1am2e0fkd" path="res://Scenes/Characters/hitboxes/Test/back_air_hitbox.tscn" id="33_ylel6"]
[ext_resource type="Texture2D" uid="uid://lu3e3dednw74" path="res://Assets/Sprites/Player/SpriteSheet/AnimationSpriteSheet.png" id="34_c6k68"]
[ext_resource type="PackedScene" uid="uid://u8yai1ebbfid" path="res://Scenes/Characters/hitboxes/Test/forward_air_hitbox.tscn" id="34_kvrdy"]
[ext_resource type="Script" path="res://Scenes/Characters/AnimationPlayer.gd" id="35_na8g4"]

[sub_resource type="GDScript" id="GDScript_yv2bm"]
script/source = "extends CharacterBody2D

# Other data
var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\") * 3
enum States {IDLE, WALKING, RUNNING, JUMPING, FALLING, JAB, DASH_ATTACK, NEUTRAL_AIR, CROUCHING, DOWNTILT, UPTILT, SIDETILT, DOWN_AIR, UP_AIR, FORWARD_AIR, BACK_AIR, SHIELDING, DOWNED, STANDING, ROLLING, AVOID}

#var state = States.IDLE
var state = States.DOWNED

# Movement
var direction
var shieldDirection = Vector2(0,0)
var tilt

const SPEED = 800.0
var acceleration = 2000
var max_speed = 600.0
var last_direction = 1
var jump_direction = 0

# Jumping
const JUMP_VELOCITY = -700.0
var MAX_JUMP_TIME = 0.2
var is_jumping = false
var jump_timer = 0

# Dash Attack values
var dash_timer = 0.2
var dash_distance = 1000.0

# Attacks with timer
var isActive = true
var isWalking = false
var jumpCount = 2
var canJumpEsp = false

# Tilt attacks
var canTilt = true
var canTiltAir = true
var canRoll = true

func _process(delta):
	# Check keyboard input
	if Input.is_action_pressed(\"ui_left\"):
		print(\"Keyboard input detected. Device index:\", Input.get_joy_info())
	
	# Check joystick input
	for i in range(Input.get_device_count()):
		if Input.is_joy_known(i):
			var joy = Input.get_joy(i)
			
			# Check if joystick is moved in any direction
			if joy.get_axis(0) != 0.0 or joy.get_axis(1) != 0.0:
				print(\"Joystick input detected. Device index:\", i)

func _physics_process(delta):
	inputMovement() # here i get the values of direction
	touchingFloor(delta) # this function i will use it if the user is touching the floor or not
	stateReseters() # reseters of data
	
	if isActive:
		if state != States.DOWNED and state != States.STANDING and state != States.ROLLING:
			jumpLogic(delta)
			movementLogic(delta)
			crouchLogic()
			floorAttacks()
			airAttacks()
			shieldLogic()
			shieldRoll()
		else:
			downedLogic()
	else:
		activeReset(delta)
	move_and_slide()

func downedLogic():
	if direction.y > 0.8 or direction.y < -0.8:
		dash_timer = 0.0
		state = States.STANDING
		isActive = false
	if direction.x > 0.8 or direction.x < -0.8:
		roll()
 
func inputMovement():
	shieldDirection = Input.get_vector(\"left\", \"right\", \"down\", \"up\")
	if state != States.SHIELDING:
		if !isWalking:
			direction = Input.get_vector(\"left\", \"right\", \"down\", \"up\")
		else:
			direction = Input.get_vector(\"left\", \"right\", \"down\", \"up\") / 2.1
	else:
		direction = Vector2(0, 0)
	tilt = Input.get_vector(\"left_tilt\", \"right_tilt\", \"down_tilt\", \"up_tilt\")

func shieldLogic():
	if Input.is_action_pressed(\"shield\") and is_on_floor() and isActive:
		state = States.SHIELDING
		velocity.x = 0

func crouchLogic():
	if direction.y < -0.8 and direction.x < 0.2 and direction.x > -0.2 and is_on_floor():
		state = States.CROUCHING
		velocity.x = 0

func touchingFloor(delta):
	if is_on_floor():
		jump_direction = last_direction
		jumpCount = 2
	else:
		if state == States.WALKING or state == States.RUNNING or state == States.IDLE:
			state = States.FALLING
		velocity.y += gravity * delta
		if direction.y < -0.8:
			velocity.y = -JUMP_VELOCITY * 2

func activeReset(delta):
	dash_timer += delta
	resetDashAttack(dash_timer)
	resetNeutralAir(dash_timer)
	resetDownAir(dash_timer)
	resetSideTilt(dash_timer)
	resetUpAir(dash_timer)
	resetUpTilt(dash_timer)
	resetForwardAir(dash_timer)
	resetBackAir(dash_timer)
	resetDownTilt(dash_timer)
	resetJab(dash_timer)
	resetStanding(dash_timer)
	resetRolling(dash_timer)
	resetAvoid(dash_timer)

func stateReseters():
	if (tilt.x > -0.8 and tilt.x < 0.8 and tilt.y > -0.8 and tilt.y < 0.8 ):
		canTilt = true

	if !Input.is_action_pressed(\"jump\"):
		canJumpEsp = true

	if isWalking and direction.x == 0:
		isWalking = false
		
	if shieldDirection.x < 0.8 and shieldDirection.x > -0.8 and shieldDirection.y < 0.8 and shieldDirection.y > -0.8:
		canRoll = true
		
func shieldRoll():
	if state == States.SHIELDING and (shieldDirection.x > 0.8 or shieldDirection.x < -0.8) and (shieldDirection.y < 0.8 and shieldDirection.y > -0.8) and canRoll:
		canRoll = false
		roll()
	if state == States.SHIELDING and (shieldDirection.y > 0.8 or shieldDirection.y < -0.8) and (shieldDirection.x < 0.8 and shieldDirection.x > -0.8) and canRoll:
		canRoll = false
		avoid()

func jumpLogic(delta):
	if is_jumping:
		jump_timer += delta
		if Input.is_action_pressed(\"jump\") and jump_timer < MAX_JUMP_TIME:
			state = States.JUMPING
			velocity.y = JUMP_VELOCITY
		else:
			state = States.FALLING
			is_jumping = false
			jump_timer = 0

	if Input.is_action_pressed(\"jump\"):
		if (state == States.FALLING and jumpCount > 0 and canJumpEsp) or is_on_floor():
			jump_direction = last_direction
			jumpCount -= 1
			canJumpEsp = false
			is_jumping = true
			jump_timer = 0

func movementLogic(delta):
	if direction.x != 0 and state != States.DASH_ATTACK:
		last_direction = direction.x
		if is_on_floor():
			if (direction.x >= 0.5 or direction.x <= -0.5):
				state = States.RUNNING
			else:
				state = States.WALKING
			velocity.x = move_toward(velocity.x, direction.x * max_speed, (acceleration * delta) * 10)
		else:
			velocity.x = move_toward(velocity.x, direction.x * max_speed, (acceleration * delta) * 5)
	elif direction.x == 0 and state != States.JUMPING and !Input.is_action_pressed(\"shield\") and is_on_floor():
			state = States.IDLE
			velocity.x = move_toward(velocity.x, 0, 100)

func floorAttacks():
	if (state == States.IDLE or state == States.WALKING or state == States.CROUCHING) and state != States.SHIELDING:
		if state == States.IDLE: 
			if Input.is_action_pressed(\"basic_attack\") and state != States.CROUCHING:
				isActive = false
				state = States.JAB
				dash_timer = 0.0
		if (direction.x >= 0.2 or direction.x <= -0.2):
			if Input.is_action_just_pressed(\"basic_attack\") and state != States.SHIELDING:
				sideTiltAttack()

		if ((state == States.WALKING or state == States.IDLE or state == States.CROUCHING) and (tilt.x < -0.8 or tilt.x > 0.8) and canTilt) and state != States.SHIELDING:
			if state == States.IDLE:
				last_direction = tilt.x
			sideTiltAttack()

		if ((state == States.CROUCHING and Input.is_action_just_pressed(\"basic_attack\")) or is_on_floor() and tilt.y < -0.8) and canTilt:
			velocity.x = 0
			downTiltAttack()

		if (((direction.y > 0.5 and Input.is_action_just_pressed(\"basic_attack\")) or is_on_floor() and tilt.y > 0.8) and canTilt):
			upTiltAttack()
	elif (state == States.RUNNING and (Input.is_action_just_pressed(\"basic_attack\") or (tilt.x < -0.8 or tilt.x > 0.8))) and state != States.SHIELDING:
		dashAttack()

func airAttacks():
	if state == States.FALLING:
		if Input.is_action_just_pressed(\"basic_attack\") and direction.y > -0.1 and direction.y < 0.1 and direction.x == 0:
			baseAirAttack(States.NEUTRAL_AIR)
		if ((direction.y < -0.1 and Input.is_action_just_pressed(\"basic_attack\")) or tilt.y < -0.8) and canTilt:
			baseAirAttack(States.DOWN_AIR)
		if ((direction.y > 0.1 and Input.is_action_just_pressed(\"basic_attack\")) or tilt.y > 0.8) and canTilt:
			baseAirAttack(States.UP_AIR)
		isForwardAir()
		isBackAir()

func isForwardAir():
	if canTilt:
		if jump_direction > 0 and ((direction.x > 0.1 and Input.is_action_just_pressed(\"basic_attack\")) or tilt.x > 0.5):
			baseAirAttack(States.FORWARD_AIR)
		if jump_direction < 0 and ((direction.x < -0.1 and Input.is_action_just_pressed(\"basic_attack\")) or tilt.x < -0.5):
			baseAirAttack(States.FORWARD_AIR)

func isBackAir():
	if canTilt:
		if jump_direction > 0 and ((direction.x < -0.1 and Input.is_action_just_pressed(\"basic_attack\")) or tilt.x < -0.5):
			baseAirAttack(States.BACK_AIR)
		if jump_direction < 0 and ((direction.x > 0.1 and Input.is_action_just_pressed(\"basic_attack\")) or tilt.x > 0.5):
			baseAirAttack(States.BACK_AIR)

# Attacks / movements ------------------------------------------------------------------------------
func baseAirAttack(playerState):
	isActive = false
	state = playerState
	dash_timer = 0.0
	canTilt = false

func sideTiltAttack():
	state = States.SIDETILT
	isActive = false
	dash_timer = 0.0
	isWalking = false
	velocity.x = 0
	velocity.x = 100 * last_direction
	canTilt = false

func avoid():
	collision_layer = 32
	state = States.AVOID
	isActive = false
	dash_timer = 0.0
	isWalking = true
	
func roll():
	var movementDirection = direction
	
	if state == States.SHIELDING:
		movementDirection = shieldDirection
	
	collision_layer = 32
	state = States.ROLLING
	isActive = false
	dash_timer = 0.0
	isWalking = true
	if movementDirection.x > 0.8:
		last_direction = 1
	elif movementDirection.x < -0.8:
		last_direction = -1
	velocity.x = 0
	velocity.x = 600 * last_direction

func upTiltAttack():
	state = States.UPTILT
	isActive = false
	dash_timer = 0.0
	isWalking = false
	canTilt = false
	
func downTiltAttack():
	state = States.DOWNTILT
	velocity.x = 0
	isActive = false
	dash_timer = 0.0
	isWalking = false
	canTilt = false

func dashAttack():
	isActive = false
	state = States.DASH_ATTACK
	dash_timer = 0.0
	velocity.x = dash_distance * last_direction

# RESETERS -----------------------------------------------------------------------------------------
func resetDashAttack(dash_timer):
	if state == States.DASH_ATTACK:
		if dash_timer >= 0.1:
			state = States.IDLE
			isWalking = true
			isActive = true
		
func resetNeutralAir(dash_timer):
	if state == States.NEUTRAL_AIR:
		if dash_timer >= 0.3 or is_on_floor():
			state = States.FALLING
			isWalking = true
			isActive = true

func resetDownAir(dash_timer):
	if state == States.DOWN_AIR:
		if dash_timer >= 0.4 or is_on_floor():
			state = States.FALLING
			isWalking = true
			isActive = true

func resetSideTilt(dash_timer):
	if state == States.SIDETILT:
		if dash_timer >= 0.2:
			state = States.IDLE
			isWalking = true
			isActive = true

func resetUpAir(dash_timer):
	if state == States.UP_AIR:
		if dash_timer >= 0.3 or is_on_floor():
			state = States.FALLING
			isWalking = true
			isActive = true
		
func resetForwardAir(dash_timer):
	if state == States.FORWARD_AIR:
		if dash_timer >= 0.3 or is_on_floor():
			state = States.FALLING
			isWalking = true
			isActive = true

func resetBackAir(dash_timer):
	if state == States.BACK_AIR:
		if dash_timer >= 0.3 or is_on_floor():
			state = States.FALLING
			isWalking = true
			isActive = true

func resetUpTilt(dash_timer):
	if state == States.UPTILT:
		if dash_timer >= 0.2:
			state = States.IDLE
			isWalking = true
			isActive = true

func resetDownTilt(dash_timer):
	if state == States.DOWNTILT:
		if dash_timer >= 0.2:
			state = States.IDLE
			isWalking = true
			isActive = true

func resetJab(dash_timer):
	if state == States.JAB:
		if dash_timer >= 0.2:
			state = States.IDLE
			isWalking = true
			isActive = true
		
func resetStanding(dash_timer):
	if state == States.STANDING:
		if dash_timer >= 0.7:
			isActive = true
			state = States.IDLE
		
func resetRolling(dash_timer):
	if state == States.ROLLING:
		if dash_timer >= 0.2:
			isActive = true
			state = States.IDLE
			collision_layer = 2
			
func resetAvoid(dash_timer):
	if state == States.AVOID:
		if dash_timer >= 0.2:
			isActive = true
			state = States.IDLE
			collision_layer = 2
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_u2po8"]
height = 77.0

[sub_resource type="Animation" id="Animation_0sehn"]
resource_name = "AVOID"
length = 0.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [40]
}

[sub_resource type="Animation" id="Animation_jay74"]
resource_name = "BAIR"
length = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [14]
}

[sub_resource type="Animation" id="Animation_fs6oy"]
resource_name = "CROUCHING"
length = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [20]
}

[sub_resource type="Animation" id="Animation_wf4kq"]
resource_name = "DASH_ATTACK"
length = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [22]
}

[sub_resource type="Animation" id="Animation_iwlg7"]
resource_name = "DOWNED"
length = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [32]
}

[sub_resource type="Animation" id="Animation_wgh02"]
resource_name = "DOWNTILT"
length = 0.2
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [4, 5]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("DOWN_TILT_HITBOX:monitoring")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}

[sub_resource type="Animation" id="Animation_wlqvv"]
resource_name = "DOWN_AIR"
length = 0.4
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [2, 3]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("DOWNAIR_HITBHOX:monitoring")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}

[sub_resource type="Animation" id="Animation_0bld2"]
resource_name = "FAIR"
length = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [12]
}

[sub_resource type="Animation" id="Animation_ianko"]
resource_name = "FALLING"
length = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [24]
}

[sub_resource type="Animation" id="Animation_t2o3i"]
resource_name = "IDLE"
length = 2.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [0, 1]
}

[sub_resource type="Animation" id="Animation_chdis"]
resource_name = "JAB"
length = 0.2
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [6, 7]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("JAB_HITBOX:monitoring")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}

[sub_resource type="Animation" id="Animation_c8ppk"]
resource_name = "JUMPING"
length = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [26]
}

[sub_resource type="Animation" id="Animation_yme35"]
resource_name = "NEUTRAL_AIR"
length = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [28]
}

[sub_resource type="Animation" id="Animation_vtrkj"]
resource_name = "ROLLING"
length = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [38, 39]
}

[sub_resource type="Animation" id="Animation_oddxi"]
resource_name = "RUNNING"
length = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [30]
}

[sub_resource type="Animation" id="Animation_r42ox"]
resource_name = "SHIELDING"
length = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [34]
}

[sub_resource type="Animation" id="Animation_8yqvw"]
resource_name = "SIDETILT"
length = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [16]
}

[sub_resource type="Animation" id="Animation_kh5au"]
resource_name = "STANDING"
length = 0.7
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [36, 37]
}

[sub_resource type="Animation" id="Animation_4052c"]
resource_name = "Test avoid"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [32, 4, 0]
}

[sub_resource type="Animation" id="Animation_m6fbm"]
resource_name = "UPAIR"
length = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [8, 9]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("UPAIR_HITBOX:monitoring")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}

[sub_resource type="Animation" id="Animation_np8oa"]
resource_name = "UPTILT"
length = 0.2
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [10, 11]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("UPTILT_HITBOX:monitoring")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [false, true]
}

[sub_resource type="Animation" id="Animation_yhr26"]
resource_name = "WALKING"
length = 0.1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [18]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_2gus0"]
_data = {
"AVOID": SubResource("Animation_0sehn"),
"BAIR": SubResource("Animation_jay74"),
"CROUCHING": SubResource("Animation_fs6oy"),
"DASH_ATTACK": SubResource("Animation_wf4kq"),
"DOWNED": SubResource("Animation_iwlg7"),
"DOWNTILT": SubResource("Animation_wgh02"),
"DOWN_AIR": SubResource("Animation_wlqvv"),
"FAIR": SubResource("Animation_0bld2"),
"FALLING": SubResource("Animation_ianko"),
"IDLE": SubResource("Animation_t2o3i"),
"JAB": SubResource("Animation_chdis"),
"JUMPING": SubResource("Animation_c8ppk"),
"NEUTRAL_AIR": SubResource("Animation_yme35"),
"ROLLING": SubResource("Animation_vtrkj"),
"RUNNING": SubResource("Animation_oddxi"),
"SHIELDING": SubResource("Animation_r42ox"),
"SIDETILT": SubResource("Animation_8yqvw"),
"STANDING": SubResource("Animation_kh5au"),
"Test avoid": SubResource("Animation_4052c"),
"UPAIR": SubResource("Animation_m6fbm"),
"UPTILT": SubResource("Animation_np8oa"),
"WALKING": SubResource("Animation_yhr26")
}

[node name="Player" type="CharacterBody2D"]
collision_layer = 2
collision_mask = 5
floor_snap_length = 0.0
script = SubResource("GDScript_yv2bm")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 4.5)
shape = SubResource("CapsuleShape2D_u2po8")
debug_color = Color(0, 0.6, 0.701961, 0.419608)

[node name="Label" type="Label" parent="."]
offset_left = -47.0
offset_top = -71.0
offset_right = 47.0
offset_bottom = -45.0
text = "Jumping"
horizontal_alignment = 1
script = ExtResource("1_sd273")

[node name="JAB_HITBOX" parent="." instance=ExtResource("13_gc2vs")]
visible = false
position = Vector2(0, -8)
collision_layer = 1
collision_mask = 3
monitoring = false

[node name="DASH_ATTACK_HITBOX" parent="." instance=ExtResource("14_h4xt5")]
visible = false
collision_mask = 3

[node name="NAIR_HITBOX" parent="." instance=ExtResource("15_ia7bt")]
visible = false

[node name="DOWN_TILT_HITBOX" parent="." instance=ExtResource("19_enisu")]
visible = false

[node name="UPTILT_HITBOX" parent="." instance=ExtResource("22_vcq5u")]
visible = false
collision_mask = 3
monitoring = false

[node name="DOWNAIR_HITBHOX" parent="." instance=ExtResource("25_p0biw")]
visible = false
collision_mask = 3

[node name="SIDETILT_HITBOX" parent="." instance=ExtResource("27_ffsd5")]
visible = false
collision_mask = 3

[node name="UPAIR_HITBOX" parent="." instance=ExtResource("30_v0kk2")]
visible = false
collision_mask = 3

[node name="BACK_AIR_HITBOX" parent="." instance=ExtResource("33_ylel6")]
visible = false
collision_mask = 3

[node name="FORWARD_AIR_HITBOX" parent="." instance=ExtResource("34_kvrdy")]
visible = false
collision_mask = 3

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_2gus0")
}
script = ExtResource("35_na8g4")

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, 3)
scale = Vector2(0.235, 0.235)
texture = ExtResource("34_c6k68")
hframes = 2
vframes = 21
frame = 40
